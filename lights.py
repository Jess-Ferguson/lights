#!/usr/bin/python3

import datetime
import hashlib
import logging
import os.path
import random
import string

from core.dbMethods import LightsDB
from core.LEDMethods import LEDStrip
from core.lightsExceptions import DatabaseException
from flask import Flask, request, redirect, url_for, render_template, session
from rpi_ws281x import Color

databaseFileName = "./lights.sqlite3"
logFileName = "/var/log/lights/lights.log"

app = Flask(__name__)
app.secret_key = 'test-key' # In release build this will be a random string generated by the installation script

database = LightsDB(databaseFileName)

myStrip = LEDStrip()

logFormat = "[%(asctime)-15s]\t[%(levelname)s]\t%(message)s"
validStyles = [	"rainbow-circle",
				"animated-rainbow",
				"pixel-pileup",
				"rainbow-pixel-pileup",
				"pixel-run",
				"rainbow-pixel-run",
				"solid-color"
			] # These possible style names will probably be set in the configuration file in the future

lightsLogger = logging.getLogger('lights')
logHandler = logging.FileHandler(logFileName)
logFormatter = logging.Formatter(logFormat)
logHandler.setFormatter(logFormatter)
lightsLogger.addHandler(logHandler)
lightsLogger.setLevel(logging.INFO)

try:
	entry = database.getLastStateEntry()

	methodName = entry[2]
	color = entry[3].lstrip('#')
	color = Color(int(color[0:2], 16), int(color[2:4], 16), int(color[4:6], 16))
	speed = 120 - int(entry[4])
	offset = int(entry[5])

	myStrip.update(entry[2], { 'color' : color, 'delay' : entry[4], 'offset' : entry[5] })
except Exception as exception:
	lightsLogger.error("Failed to retrieve state from database: %s", exception)
	myStrip.update('solid-color', { 'color' : Color(0, 0, 0)})

@app.before_request
def preRequestHandler():
	if request.url_rule is None:
		return redirect(url_for("login"))
	elif not os.path.exists(databaseFileName) and "setup" not in request.url_rule.rule:
		session['username'] = "admin"
		return redirect(url_for("setup"))
	elif "username" not in session.keys() and "login" not in request.url_rule.rule and "static" not in request.url_rule.rule: # Prevent user from accessing anything but static content without being logged in
		return redirect(url_for("login"))

@app.route("/", methods = ["GET", "POST"])
def index():
	if request.method == "GET":
		try:
			entry = database.getLastStateEntry()
		except Exception as exception:
			lightsLogger.error("Failed to retrieve state from database: %s", exception)
			return "Error getting current state!"

		return render_template("/index.html", style = entry[2], color = entry[3], speed = entry[4], offset = entry[5])
	elif request.method == "POST":
		style = request.form.get("style")
		color = request.form.get("color-choice")
		speed = request.form.get("speed")
		offset = request.form.get("offset")

		if speed.isdigit() and offset.isdigit():
			speed = int(speed)
			offset = int(offset)
		else:
			return redirect(url_for("index"))

		if style not in validStyles or offset < 0 or offset > 100 or speed < 0 or speed > 100:
			return redirect(url_for("index"))

		try:
			database.insertStateEntry(datetime.datetime.now(), style, color, speed, offset)
			lightsLogger.info("Successfully added state %s %s %d %d to database!", style, color, int(speed), int(offset))

			color = color.lstrip('#')
			args = {}

			args['color'] = Color(int(color[0:2], 16), int(color[2:4], 16), int(color[4:6], 16))
			args['delay'] = 120 - int(speed)
			args['offset'] = int(offset)

			myStrip.update(style, args)
		except Exception as exception:
			lightsLogger.error("Failed to add state entry to database: %s", exception)

		return redirect(url_for("index"))
	
@app.route("/setup")
def setup():
	if not os.path.exists(databaseFileName):
		username = "admin"
		password = "defaultpass" # In release build this will be a randomly generated string which the user will be able to change
		passwordSalt = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(6))
		passwordHash = hashlib.sha512((password + passwordSalt).encode('utf-8')).hexdigest()

		try:
			database.initialise()
			lightsLogger.info("Successfully initialised database!")
		except Exception as exception:
			lightsLogger.error("Failed to initialise database: %s", exception)
			return "Error initialising database!"

		try:
			database.insertUserEntry("admin", passwordHash, passwordSalt)
			lightsLogger.info("Successfully added user \'%s\' to the database!", username)
		except Exception as exception:
			lightsLogger.error("Failed to insert default user to database: %s", exception)
			return "Error inserting base value into database!"

		try:
			database.insertStateEntry(datetime.datetime.now(), "solid-color", '#ffffff', 0, 0)
			lightsLogger.info("Successfully added initial state to the database!")
			# Add code to update the lights state here...
		except Exception as exception:
			lightsLogger.error("Failed to insert default user to database: %s", exception)
			return "Error inserting base value into database!"

		session.pop("username", None)

	return redirect(url_for("login"))

@app.route("/login", methods = ["GET", "POST"])
def login():
	if "username" in session.keys():
		return redirect(url_for("index"))
	if request.method == "GET":
		return render_template("/login.html", incorrectLogin = False)
	elif request.method == "POST":
		username = request.form.get("username")
		password = request.form.get("password")

		try:
			entry = database.getUserEntryFromUsername(username)
		except DatabaseException as exception:
			lightsLogger.info("Failed login with username \"" + username + "\"")
			return render_template("/login.html", incorrectLogin = True)
		except Exception as exception:
			lightsLogger.error("Failed to access database: %s", exception)
			return render_template("/login.html", incorrectLogin = True) # Log the database access error but don't tell the user

		passwordSalt = entry[3]
		passwordHash = passwordHash = hashlib.sha512((password + passwordSalt).encode('utf-8')).hexdigest()

		if passwordHash == entry[2]:
			session['username'] = username
			lightsLogger.info("User \"" + username + "\" successfully logged in")
			return redirect(url_for("index"))
		else:
			lightsLogger.info("Failed login with username \"" + username + "\"")
			return render_template("/login.html", incorrectLogin = True)

@app.route("/logout")
def logout():
	lightsLogger.info("User \"" + session['username'] + "\" successfully logged out")
	session.pop('username', None)
	return redirect(url_for("login"))
