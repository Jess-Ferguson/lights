import sqlite3
from core.lightsExceptions import DatabaseException

class LightsDB:
	"""
	Class to represent the fundamental database type. Performs direct interactions with the database file

	NOTE:
		The methods in this class are **ONLY** to be called by the methods of the classes which extend it
	"""
	def __init__(self, fileName):
		"""
		Initialises the Database class

		Args:
			fileName: The name of the database file to be used for the duration of the programs execution

		Returns:
			None

		Raises:
			None

		"""
		self.fileName = fileName

	def initialise(self):
		"""
		Initialises the 2 tables of the database:
			- userLogins
			- stateHistory

		Args:
			None

		Returns:
			None

		Raises:
			sqlite3.DatabaseError: If the tables fail to initialise.
			sqlite3.Error: If the program cannot connect to the database.

		"""
		tableGenQuerys = [	"CREATE TABLE userLogins (userID INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT UNIQUE, hash TEXT, salt TEXT)",
							"CREATE TABLE stateHistory (updateID INTEGER PRIMARY KEY AUTOINCREMENT, time TEXT UNIQUE, style TEXT, color TEXT, speed INTEGER, offset INTEGER)"]

		try:
			conn = sqlite3.connect(self.fileName) # Will create DB if it doesn't exist
			cursor = conn.cursor()
			for query in tableGenQuerys:
				cursor.execute(query) # Will fail if DB already exists
			conn.commit() # Commit current transaction to DB
			conn.close() # Close DB connection
		except sqlite3.DatabaseError as exception:
			conn.commit()
			conn.close()
			raise sqlite3.DatabaseError("Failed to initialise table! (%s)" % exception)
		except sqlite3.Error as exception:
			raise sqlite3.Error("Could not connect to database (%s)" % exception)

	def insertUserEntry(self, username, passwordHash, passwordSalt):
		"""
		Insert a user into the userLogins table

		Args:
			username: The name of the current user
			passwordHash: The password hash of the current user
			passwordSalt: The salt for the password hash of the current user

		Returns:
			entry: A list containing the every item of the entry inserted to the database plus the userID generated by the database

		Raises:
			sqlite3.IntegrityError: If there is a problem inserting the entry to the database
			sqlite3.Error: If the program cannot connect to the database
		"""
		try:
			conn = sqlite3.connect(self.fileName)
			cursor = conn.cursor()
			cursor.execute("INSERT INTO userLogins(username, hash, salt) VALUES (?, ?, ?)", (username, passwordHash, passwordSalt)) # We have to specify the column headings due to the ID auto incrementing
			cursor.execute("SELECT * from userLogins WHERE username = (?)", (username,))
			entry = cursor.fetchone()
			conn.commit()
			conn.close()
			return entry
		except sqlite3.IntegrityError as exception:
			conn.close()
			raise sqlite3.IntegrityError("Could not insert entry user to database! (%s)" % (exception))
		except sqlite3.Error as exception:
			raise sqlite3.Error("Could not connect to database! (%s)" % exception)

	def getUserEntryFromUsername(self, username):
		"""
		Checks if an entry with given an username exists in the database

		Args:
			username: The username of the current user

		Returns:
			entry: A list containing the every item of the entry corresponding to the given username if it exists in the database

		Raises:
			DatabaseException: If an entry with the provided username is not found in the database
			sqlite3.Error: If the program cannot connect to the database
		"""
		try:
			conn = sqlite3.connect(self.fileName)
			cursor = conn.cursor()
			cursor.execute("SELECT * from userLogins WHERE username = (?)", (username,)) # Use parametised queries to protect against SQLi
			entry = cursor.fetchone()
			conn.close()
		except sqlite3.Error as exception:
			raise sqlite3.Error("Could not connect to database! (%s)" % exception)

		if entry is None:
			raise DatabaseException("Could not find entry in userLogins table!")

		return entry

	def insertStateEntry(self, time, style, color, speed, offset):
		"""
		Insert the current state of the lights into the stateHistory table.

		Args:
			time: The time at which the update was requested
			style: The style of the light state
			color: The color of the light style
			speed: The speed of the light style
			offset: The offset of the light style if relevant

		Returns:
			entry: A list containing the every item of the entry inserted to the database plus the updateID generated by the database

		Raises:
			sqlite3.IntegrityError: If there is a problem inserting the entry to the database
			sqlite3.Error: If the program cannot connect to the database
		"""
		try:
			conn = sqlite3.connect(self.fileName)
			cursor = conn.cursor()
			cursor.execute("INSERT INTO stateHistory(time, style, color, speed, offset) VALUES (?, ?, ?, ?, ?)", (time, style, color, speed, offset)) 
			cursor.execute("SELECT * from stateHistory WHERE time = (?)", (time,))
			entry = cursor.fetchone()
			conn.commit()
			conn.close()
			return entry
		except sqlite3.IntegrityError as exception:
			conn.close()
			raise sqlite3.IntegrityError("Could not insert entry user to database! (%s)" % (exception))
		except sqlite3.Error as exception:
			raise sqlite3.Error("Could not connect to database! (%s)" % exception)

	def getLastStateEntry(self):
		"""
		Return the last state entry added to the stateHistory table

		Args:
			None

		Returns:
			entry: The last state entry added to the table

		Raises:
			DatabaseException: If the database is empty
			sqlite3.Error: If the program cannot connect to the database
		"""
		try:
			conn = sqlite3.connect(self.fileName)
			cursor = conn.cursor()
			cursor.execute("SELECT * FROM stateHistory ORDER BY updateID DESC LIMIT 1")
			entry = cursor.fetchone()
			conn.close()
		except sqlite3.Error as exception:
			raise sqlite3.Error("Could not connect to database! (%s)" % exception)

		return entry

	def getLastStateHistory(self):
		"""
		Return every entry in the stateHistory table

		Args:
			None

		Returns:
			entrys: The list of states in the state history table

		Raises:
			DatabaseException: If the database is empty
			sqlite3.Error: If the program cannot connect to the database
		"""
		try:
			conn = sqlite3.connect(self.fileName)
			cursor = conn.cursor()
			cursor.execute("SELECT * FROM stateHistory")
			entrys = cursor.fetchall()
			conn.close()
		except sqlite3.Error as exception:
			raise sqlite3.Error("Could not connect to database! (%s)" % exception)

		return entrys